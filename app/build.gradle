apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'kotlin-kapt'

apply from: '../config/dependency/dependencies.gradle'

apply plugin: 'io.fabric'

apply plugin: "io.gitlab.arturbosch.detekt"

// If release config detected, install it and use it
if (project.hasProperty("behaviorTrackerSigningPath")) {
    apply from: "$behaviorTrackerSigningPath"

    android {
        signingConfigs {
            releaseSigningConfig rootProject.ext.releaseSigningConfig
        }

        buildTypes {
            release {
                signingConfig signingConfigs.releaseSigningConfig
            }
        }
    }
}

android {

    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        applicationId "fr.bowser.time"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName

        resConfigs "en", "fr", "it", "tr"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation":
                                     "$projectDir/schemas".toString()]
            }
        }
    }

    buildTypes {
        release {
            shrinkResources true
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField 'boolean', 'UA', 'false'
        }
        debug {
            versionNameSuffix ".dev"
            buildConfigField 'boolean', 'UA', 'false'
        }
        ua {
            initWith debug
            versionNameSuffix ".ua"
            buildConfigField 'boolean', 'UA', 'true'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    sourceSets {
        main {
            // Split resources.
            // https://medium.com/google-developer-experts/android-project-structure-alternative-way-29ce766682f0#.sjnhetuhb
            res.srcDirs = [
                    'src/main/res/common',
                    'src/main/res/home',
                    'src/main/res/timer',
                    'src/main/res/createtimer',
                    'src/main/res/timerlist',
                    'src/main/res/notification',
                    'src/main/res/setting',
                    'src/main/res/showmode',
                    'src/main/res/alarm',
                    'src/main/res/ua',
                    'src/main/res/rewards',
                    'src/main/res/rewardsrow',
                    'src/main/res/pomodoro',
                    'src/main/res/choosepomodorotimer',
            ]
        }
        androidTest.assets.srcDirs += files("$projectDir/schemas".toString())
    }

    lintOptions {
        abortOnError false
    }

    kotlin {
        experimental {
            coroutines 'enable'
        }
    }
}

configurations {
    ktlint
}

dependencies {
    // Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:0.20"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:0.20"

    // Support library
    implementation rootProject.ext.dependencies.supportDesign
    implementation rootProject.ext.dependencies.supportConstraint
    implementation rootProject.ext.dependencies.supportCardView
    implementation rootProject.ext.dependencies.supportRecyclerView
    implementation rootProject.ext.dependencies.supportAnnotation

    // Billing
    implementation 'com.android.billingclient:billing:1.1'

    // Architecture component
    implementation rootProject.ext.dependencies.room
    kapt rootProject.ext.dependencies.annotationProcessorRoom

    // Firebase
    implementation rootProject.ext.dependencies.firebaseCore

    // Other
    implementation rootProject.ext.dependencies.dagger2
    kapt rootProject.ext.dependencies.annotationProcessorDagger2

    implementation('com.crashlytics.sdk.android:crashlytics:2.9.5@aar') {
        transitive = true
    }

    // Static analyzer
    ktlint "com.github.shyiko:ktlint:0.15.0"

    // Test
    testImplementation 'org.json:json:20180813'
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.mockito:mockito-core:2.22.0'
    androidTestImplementation "androidx.room:room-testing:2.0.0-rc01"
    androidTestImplementation 'androidx.test:runner:1.1.0-alpha4'
    androidTestImplementation 'androidx.test:rules:1.1.0-alpha4'

    androidTestImplementation 'org.hamcrest:hamcrest-library:1.3'

    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.0-alpha4'

}

detekt {
    config = files("detekt-config.yml")
    input = files(
            "src/main/java",
    )
    parallel = true
    disableDefaultRuleSets = false
    debug = false
    reports {
        html {
            enabled = true
            destination = file("build/reports/detekt.html")
        }
    }
}

task ktlint(type: JavaExec, group: "verification") {
    description = "Check Kotlin code style."
    classpath = configurations.ktlint
    main = "com.github.shyiko.ktlint.Main"
    args "src/**/*.kt"
    // args "--reporter=checkstyle, output=${buildDir}/ktlint.xml
}

def build_param = "${build}"

if (build_param == "CI") {
    android.variantFilter { variant ->
        if (variant.buildType.name.equals('release')) {
            variant.setIgnore(true)
        }
    }
}

apply plugin: 'com.google.gms.google-services'